
#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 object                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This is the config file of a custom object.
# If you add this object correctly to your BiomeConfigs, it will spawn in the world.

# This is the creator of this BO3 object
Author: TrueMalice

# A short description of this BO3 object
Description: No description given

# The BO3 version, don't change this! It can be used by external applications to do a version check.
Version: 3

# The settings mode, WriteAll, WriteWithoutComments or WriteDisable. See WorldConfig.
SettingsMode: WriteDisable


#######################################################################
# +-----------------------------------------------------------------+ #
# |                          Main settings                          | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This needs to be set to true to spawn the object in the Tree and Sapling resources.
Tree: false

# The frequency of the BO3 from 1 to 200. Tries this many times to spawn this BO3 when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Frequency: 1

# The rarity of the BO3 from 0 to 100. Each spawn attempt has rarity% chance to succeed when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Rarity: 100.0

# If you set this to true, the BO3 will be placed with a random rotation.
RotateRandomly: false

# The spawn height of the BO3 - randomY, highestBlock or highestSolidBlock.
SpawnHeight: randomY

# The height limits for the BO3.
MinHeight: 60

MaxHeight: 100

# Objects can have other objects attacthed to it: branches. Branches can also
# have branches attached to it, which can also have branches, etc. This is the
# maximum branch depth for this objects.
MaxBranchDepth: 30

# When spawned with the UseWorld keyword, this BO3 should NOT spawn in the following biomes.
# If you writer.write the BO3 name directly in the BiomeConfigs, this will be ignored.
ExcludedBiomes:


#######################################################################
# +-----------------------------------------------------------------+ #
# |                      Source block settings                      | #
# +-----------------------------------------------------------------+ #
#######################################################################

# The block(s) the BO3 should spawn in.
SourceBlocks: NETHERRACK

# The maximum percentage of the BO3 that can be outside the SourceBlock.
# The BO3 won't be placed on a location with more blocks outside the SourceBlock than this percentage.
MaxPercentageOutsideSourceBlock: 10

# What to do when a block is about to be placed outside the SourceBlock? (placeAnyway, placeAnyway)
OutsideSourceBlock: placeAnyway


#######################################################################
# +-----------------------------------------------------------------+ #
# |                              Blocks                             | #
# +-----------------------------------------------------------------+ #
#######################################################################

# All the blocks used in the BO3 are listed here. Possible blocks:
# Block(x,y,z,id[.data][,nbtfile.nbt)
# RandomBlock(x,y,z,id[:data][,nbtfile.nbt],chance[,id[:data][,nbtfile.nbt],chance[,...]])
# So RandomBlock(0,0,0,CHEST,chest.nbt,50,CHEST,anotherchest.nbt,100) will spawn a chest at
# the BO3 origin, and give it a 50% chance to have the contents of chest.nbt, or, if that
# fails, a 100% percent chance to have the contents of anotherchest.nbt.
RandomBlock(-2,0,-11,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-10,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-9,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-8,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-7,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-6,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-5,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-4,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-3,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-2,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,-1,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(-2,0,0,AIR,5,STONE:1,50,NETHERRACK,100)
Block(-2,1,-11,AIR)
Block(-2,1,-10,AIR)
Block(-2,1,-9,AIR)
Block(-2,1,-8,AIR)
Block(-2,1,-7,AIR)
Block(-2,1,-6,AIR)
Block(-2,1,-5,AIR)
Block(-2,1,-4,AIR)
Block(-2,1,-3,AIR)
Block(-2,1,-2,AIR)
Block(-2,1,-1,AIR)
Block(-2,1,0,AIR)
Block(-2,2,-11,AIR)
Block(-2,2,-10,AIR)
Block(-2,2,-9,AIR)
Block(-2,2,-8,AIR)
Block(-2,2,-7,AIR)
Block(-2,2,-6,AIR)
Block(-2,2,-5,AIR)
Block(-2,2,-4,AIR)
Block(-2,2,-3,AIR)
Block(-2,2,-2,AIR)
Block(-2,2,-1,AIR)
Block(-2,2,0,AIR)
RandomBlock(-2,3,-11,NETHERRACK,10,AIR,100)
RandomBlock(-2,3,-10,NETHERRACK,10,AIR,100)
Block(-2,3,-9,AIR)
Block(-2,3,-8,AIR)
Block(-2,3,-7,AIR)
RandomBlock(-2,3,-6,NETHERRACK,10,AIR,100)
RandomBlock(-2,3,-5,NETHERRACK,10,AIR,100)
RandomBlock(-2,3,-4,NETHERRACK,10,AIR,100)
Block(-2,3,-3,AIR)
Block(-2,3,-2,AIR)
Block(-2,3,-1,AIR)
RandomBlock(-2,3,0,NETHERRACK,10,AIR,100)
RandomBlock(-1,0,-11,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(-1,0,-10,STONE:1,15,STONE:2,40,NETHERRACK,100)
Block(-1,0,-9,NETHER_BRICK)
RandomBlock(-1,0,-8,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(-1,0,-7,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(-1,0,-6,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(-1,0,-5,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(-1,0,-4,STONE:1,15,STONE:2,40,NETHERRACK,100)
Block(-1,0,-3,NETHER_BRICK)
RandomBlock(-1,0,-2,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(-1,0,-1,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(-1,0,0,STONE:1,15,STONE:2,40,NETHERRACK,100)
Block(-1,1,-11,AIR)
Block(-1,1,-10,AIR)
Block(-1,1,-9,NETHER_FENCE)
Block(-1,1,-8,AIR)
Block(-1,1,-7,AIR)
Block(-1,1,-6,AIR)
Block(-1,1,-5,AIR)
Block(-1,1,-4,AIR)
Block(-1,1,-3,NETHER_FENCE)
Block(-1,1,-2,AIR)
Block(-1,1,-1,AIR)
Block(-1,1,0,AIR)
Block(-1,2,-11,AIR)
Block(-1,2,-10,AIR)
Block(-1,2,-9,NETHER_FENCE)
Block(-1,2,-8,AIR)
Block(-1,2,-7,AIR)
Block(-1,2,-6,AIR)
Block(-1,2,-5,AIR)
Block(-1,2,-4,AIR)
Block(-1,2,-3,NETHER_FENCE)
Block(-1,2,-2,AIR)
Block(-1,2,-1,AIR)
Block(-1,2,0,AIR)
RandomBlock(-1,3,-11,NETHERRACK,10,AIR,100)
RandomBlock(-1,3,-10,NETHERRACK,10,AIR,100)
Block(-1,3,-9,NETHER_BRICK)
RandomBlock(-1,3,-8,NETHERRACK,10,AIR,100)
RandomBlock(-1,3,-7,NETHERRACK,10,AIR,100)
RandomBlock(-1,3,-6,NETHERRACK,10,AIR,100)
RandomBlock(-1,3,-5,NETHERRACK,10,AIR,100)
RandomBlock(-1,3,-4,NETHERRACK,10,AIR,100)
Block(-1,3,-3,NETHER_BRICK)
RandomBlock(-1,3,-2,NETHERRACK,10,AIR,100)
RandomBlock(-1,3,-1,NETHERRACK,10,AIR,100)
RandomBlock(-1,3,0,NETHERRACK,10,AIR,100)
RandomBlock(0,0,-11,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(0,0,-10,STONE:1,15,STONE:2,40,NETHERRACK,100)
Block(0,0,-9,NETHER_BRICK)
RandomBlock(0,0,-8,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(0,0,-7,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(0,0,-6,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(0,0,-5,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(0,0,-4,STONE:1,15,STONE:2,40,NETHERRACK,100)
Block(0,0,-3,NETHER_BRICK)
RandomBlock(0,0,-2,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(0,0,-1,STONE:1,15,STONE:2,40,NETHERRACK,100)
RandomBlock(0,0,0,STONE:1,15,STONE:2,40,NETHERRACK,100)
Block(0,1,-11,AIR)
Block(0,1,-10,AIR)
Block(0,1,-9,NETHER_FENCE)
Block(0,1,-8,AIR)
Block(0,1,-7,AIR)
Block(0,1,-6,AIR)
Block(0,1,-5,AIR)
Block(0,1,-4,AIR)
Block(0,1,-3,NETHER_FENCE)
Block(0,1,-2,AIR)
Block(0,1,-1,AIR)
Block(0,1,0,AIR)
Block(0,2,-11,AIR)
Block(0,2,-10,AIR)
Block(0,2,-9,NETHER_FENCE)
Block(0,2,-8,AIR)
Block(0,2,-7,AIR)
Block(0,2,-6,AIR)
Block(0,2,-5,AIR)
Block(0,2,-4,AIR)
Block(0,2,-3,NETHER_FENCE)
Block(0,2,-2,AIR)
Block(0,2,-1,AIR)
Block(0,2,0,AIR)
RandomBlock(0,3,-11,NETHERRACK,10,AIR,100)
RandomBlock(0,3,-10,NETHERRACK,10,AIR,100)
Block(0,3,-9,NETHER_BRICK)
RandomBlock(0,3,-8,NETHERRACK,10,AIR,100)
RandomBlock(0,3,-7,NETHERRACK,10,AIR,100)
RandomBlock(0,3,-6,NETHERRACK,10,AIR,100)
RandomBlock(0,3,-5,NETHERRACK,10,AIR,100)
RandomBlock(0,3,-4,NETHERRACK,10,AIR,100)
Block(0,3,-3,NETHER_BRICK)
RandomBlock(0,3,-2,NETHERRACK,10,AIR,100)
RandomBlock(0,3,-1,NETHERRACK,10,AIR,100)
RandomBlock(0,3,0,NETHERRACK,10,AIR,100)
RandomBlock(1,0,-11,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-10,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-9,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-8,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-7,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-6,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-5,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-4,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-3,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-2,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,-1,AIR,5,STONE:1,50,NETHERRACK,100)
RandomBlock(1,0,0,AIR,5,STONE:1,50,NETHERRACK,100)
Block(1,1,-11,AIR)
Block(1,1,-10,AIR)
Block(1,1,-9,AIR)
Block(1,1,-8,AIR)
Block(1,1,-7,AIR)
Block(1,1,-6,AIR)
Block(1,1,-5,AIR)
Block(1,1,-4,AIR)
Block(1,1,-3,AIR)
Block(1,1,-2,AIR)
Block(1,1,-1,AIR)
Block(1,1,0,AIR)
Block(1,2,-11,AIR)
Block(1,2,-10,AIR)
Block(1,2,-9,AIR)
Block(1,2,-8,AIR)
Block(1,2,-7,AIR)
Block(1,2,-6,AIR)
Block(1,2,-5,AIR)
Block(1,2,-4,AIR)
Block(1,2,-3,AIR)
Block(1,2,-2,AIR)
Block(1,2,-1,AIR)
Block(1,2,0,AIR)
RandomBlock(1,3,-11,NETHERRACK,10,AIR,100)
RandomBlock(1,3,-10,NETHERRACK,10,AIR,100)
Block(1,3,-9,AIR)
Block(1,3,-8,AIR)
Block(1,3,-7,AIR)
RandomBlock(1,3,-6,NETHERRACK,10,AIR,100)
RandomBlock(1,3,-5,NETHERRACK,10,AIR,100)
RandomBlock(1,3,-4,NETHERRACK,10,AIR,100)
Block(1,3,-3,AIR)
Block(1,3,-2,AIR)
Block(1,3,-1,AIR)
RandomBlock(1,3,0,NETHERRACK,10,AIR,100)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 checks                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Require a condition at a certain location in order for the BO3 to be spawned.
# BlockCheck(x,y,z,BlockName[,BlockName[,...]]) - one of the blocks must be at the location
# BlockCheckNot(x,y,z,BlockName[,BlockName[,...]]) - all the blocks must not be at the location
# LightCheck(x,y,z,minLightLevel,maxLightLevel) - light must be between min and max (inclusive)

# You can use "Solid" as a BlockName for matching all solid blocks or "All" to match all blocks that aren't air.

# Examples:
#   BlockCheck(0,-1,0,GRASS,DIRT)  Require grass or dirt just below the object
#   BlockCheck(0,-1,0,Solid)       Require any solid block just below the object
#   BlockCheck(0,-1,0,WOOL)        Require any type of wool just below the object
#   BlockCheck(0,-1,0,WOOL:0)      Require white wool just below the object
#   BlockCheckNot(0,-1,0,WOOL:0)   Require that there is no white wool below the object
#   LightCheck(0,0,0,0,1)          Require almost complete darkness just below the object

#######################################################################
# +-----------------------------------------------------------------+ #
# |                             Branches                            | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Branches are objects that will spawn when this object spawns when it is used in
# the CustomStructure resource. Branches can also have branches, making complex
# structures possible. See the wiki for more details.

# Regular Branches spawn each branch with an independent chance of spawning.
# Branch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][IndividualChance])
# branchName - name of the object to spawn.
# rotation - NORTH, SOUTH, EAST or WEST.
# IndividualChance - The chance each branch has to spawn, assumed to be 100 when left blank

# Weighted Branches spawn branches with a dependent chance of spawning.
# WeightedBranch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][MaxChanceOutOf])
# MaxChanceOutOf - The chance all branches have to spawn out of, assumed to be 100 when left blank

WeightedBranch(0,0,-12,mineshaft-tunnel-s2n,NORTH,50,mineshaft-stairs-s2nD,NORTH,10,mineshaft-stairs-s2nU,NORTH,10,mineshaft-intersection-floor,NORTH,10,100)